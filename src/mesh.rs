use glam::Vec3;
use std::{
    path::Path,
    io::{ BufWriter, Write },
    fs::File,
    writeln,
    collections::HashMap,
};
use rayon::prelude::*;
use glam::vec3;
use ordered_float::NotNan;

#[derive(Debug)]
pub enum Normals {
    Vertex(Vec<Vec3>),
    Face(Vec<Vec3>),
}

#[derive(Debug)]
pub struct UnindexedMesh {
    pub faces: Vec<[Vec3; 3]>,
    pub normals: Option<Normals>,
}

impl UnindexedMesh {
    pub fn write_obj_to_file(&self, filename: &impl AsRef<Path>)
    {
        let mut file = BufWriter::new(File::create(filename).unwrap());
        writeln!(file, "# Mesh generated by rusty_ground").unwrap();
        self.faces.iter().flatten().for_each(|&vert| {
            writeln!(file, "v {} {} {}", vert.x, vert.y, vert.z).unwrap();
        });

        writeln!(file).unwrap();

        if let Some(normals) = &self.normals {
            use Normals::*;
            match &normals {
                Face(_) => writeln!(file, "# Normals: Face").unwrap(),
                Vertex(_) => writeln!(file, "# Normals: Vertex").unwrap(),
            }
            let (Vertex(normals) | Face(normals)) = normals;
            normals.iter().for_each(|&normal| {
                writeln!(file, "vn {} {} {}", normal.x, normal.y, normal.z).unwrap();
            });
            writeln!(file).unwrap();
        }
        else
        {
            writeln!(file, "# Normals: None\n").unwrap();
        }
        
        let face_iter = (1..self.faces.len())
            .map(|x| ((x*3)+1, (x*3)+2, (x*3)+3))
            .enumerate();

        match self.normals {
            Some(Normals::Face(_)) => {
                face_iter.for_each(|(i, face)| {
                    writeln!(file, "f {}//{3} {}//{3} {}//{3}",
                            face.0+1,
                            face.1+1,
                            face.2+1,
                            i+1
                        ).unwrap();
                });
            },
            Some(Normals::Vertex(_)) => {
                face_iter.for_each(|(_, face)| {
                    writeln!(file, "f {0}//{0}, {1}//{1}, {2}//{2}",
                            face.0+1,
                            face.1+1,
                            face.2+1,
                        ).unwrap();
                });
            },
            None => {
                face_iter.for_each(|(_, face)| {
                    writeln!(file, "f {} {} {}", face.0, face.1, face.2).unwrap()
                })
            }
        }
    }
}